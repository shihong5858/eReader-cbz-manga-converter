name: Build and Release

"on":
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"
    paths-ignore:
      - '**.md'
      - '**.MD'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact-name: linux-build
            build-command: "python build.py build-linux"
            setup-deps: |
              sudo apt-get update
              sudo apt-get install -y libgl1-mesa-glx libxcb-xinerama0 libfontconfig1 libdbus-1-3
          - os: windows-latest
            platform: windows
            artifact-name: windows-build
            build-command: "python build.py build-win"
            setup-deps: ""
          - os: macos-12
            platform: macos-intel
            artifact-name: macos-intel-build
            build-command: "python build.py build-mac"
            setup-deps: |
              npm install -g appdmg
          - os: macos-14
            platform: macos-arm
            artifact-name: macos-arm-build
            build-command: "python build.py build-mac"
            setup-deps: |
              npm install -g appdmg
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Node.js (for macOS DMG creation)
        if: startsWith(matrix.platform, 'macos')
        uses: actions/setup-node@v4
        with:
          node-version: 16
          
      - name: Install system dependencies
        if: matrix.setup-deps != ''
        run: ${{ matrix.setup-deps }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel pyinstaller certifi
          pip install -e .[build]
          
      - name: Build binary
        run: ${{ matrix.build-command }}
          
      - name: Prepare artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          chmod +x dist/*
          ls -la dist/
          
      - name: Prepare artifacts (Windows)
        if: matrix.platform == 'windows'
        run: |
          dir dist\
          
      - name: Prepare artifacts (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          ls -la dist/
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            dist/*
            !dist/build
          retention-days: 7
          
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Display structure of downloaded files
        run: |
          ls -la release-artifacts/
          find release-artifacts/ -type f
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Copy Linux binaries
          if [ -d "release-artifacts/linux-build" ]; then
            cp release-artifacts/linux-build/* release-files/ || true
          fi
          
          # Copy Windows binaries
          if [ -d "release-artifacts/windows-build" ]; then
            cp release-artifacts/windows-build/* release-files/ || true
          fi
          
          # Copy macOS Intel binaries
          if [ -d "release-artifacts/macos-intel-build" ]; then
            cp release-artifacts/macos-intel-build/* release-files/ || true
          fi
          
          # Copy macOS ARM binaries
          if [ -d "release-artifacts/macos-arm-build" ]; then
            cp release-artifacts/macos-arm-build/* release-files/ || true
          fi
          
          # List final release files
          echo "Final release files:"
          ls -la release-files/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          generate_release_notes: true
          files: |
            CHANGELOG.md
            release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 